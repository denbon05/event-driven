import { ISignupForm } from '@gui-bastion-types';
import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { omit } from 'lodash';
import { hashValue } from '../../utils/crypto';

@Injectable()
export class AuthService {
  constructor(private jwtService: JwtService) {}

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async validateUser(user: ISignupForm) {
    // TODO check in a storage generated by Kafka if a user already exists
    // const user = await this.userService.findOne();
  }

  encrypt(user: ISignupForm) {
    return {
      ...omit(user, 'password'),
      passwordHash: hashValue(user.password),
    };
  }

  // async login(user: Pick<UserDto, 'username' | 'id'>) {
  //   const payload: IJwtPayload = { username: user.username, sub: user.id };
  //   return {
  //     access_token: this.jwtService.sign(payload),
  //   };
  // }
}
